import os
from fastapi import Depends, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import jwt, JWSError, jwk
import httpx

# Azure AD details
TENANT_ID = os.getenv("AZURE_TENANT_ID", "")
CLIENT_ID = os.getenv("AZURE_CLIENT_ID", "")
ISSUER_JWKS = f"https://login.microsoftonline.com/{TENANT_ID}/discovery/v2.0/keys"
JWKS_URL = f"https://login.microsoftonline.com/{TENANT_ID}/discovery/v2.0/keys"
AUDIENCE = os.getenv("AUDIENCE", "")
ISSUER = f"https://sts.windows.net/{TENANT_ID}/"

auth_scheme = HTTPBearer()
jwks_cache = {}

# Fetch and cache JWKS public keys
async def get_jwks():
    if not jwks_cache:
        async with httpx.AsyncClient(verify=False) as client:
            resp = await client.get(JWKS_URL)
            resp.raise_for_status()
            jwks_cache.update({"keys": resp.json()["keys"]})
    return jwks_cache["keys"]

# Validate token and decode payload
async def verify_jwt(token: str):
    try:
        keys = await get_jwks()
        header = jwt.get_unverified_header(token)
        public_key = next((jwk.construct(k) for k in keys if k.get("kid") == header.get("kid")), None)
        if not public_key:
            raise HTTPException(status_code=403, detail="Invalid token header.")
        
        if "alg" not in header:
            header["alg"] = "RS256"
            
        payload = jwt.decode(
            token,
            public_key,
            algorithms=[header.get("alg")],
            audience=AUDIENCE,
            issuer=ISSUER,
            options={"verify_signature": False} # Set to True in production
        )
        return payload
    except JWSError as e:
        raise HTTPException(status_code=403, detail=f"Token validation error: {e}")

# FastAPI dependency for route protection
async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(auth_scheme)):
    token = credentials.credentials
    payload = await verify_jwt(token)
    user_id = payload.get("oid") or payload.get("sub")
    if not user_id:
        raise HTTPException(status_code=403, detail="User ID not found in token")
    
    return {
        "user_id": user_id,
        "username": payload.get("unique_name", ""),
        "name": payload.get("name", ""),
        "email": payload.get("upn", ""),
    }

# Example usage in a FastAPI route
# @app.delete("/memo/{memo_id}")
# async def delete_memo(memo_id: UUID, user: dict = Depends(get_current_user)):
#     # Your deletion logic here
#     return {"message": f"Memo {memo_id} deleted by user {user['user_id']}"}
