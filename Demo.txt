Got it üöÄ ‚Äî here‚Äôs a **Backend Onboarding FAQ** tailored for your stack (FastAPI + Semantic Kernel for AI agents). I‚Äôve grouped questions so a new developer onboarding into your backend will quickly find answers.

---

# Backend Onboarding FAQ (FastAPI + Semantic Kernel)

### **1. Project Setup**

**Q: How do I set up the backend locally?**

* Clone the repo.
* Create and activate a Python virtual environment.
* Install dependencies:

  ```bash
  pip install -r requirements.txt
  ```
* Start the app:

  ```bash
  uvicorn src.main:app --reload
  ```

**Q: What Python version should I use?**

* Use **Python 3.10+** (ensure it matches what‚Äôs defined in `pyproject.toml` or `requirements.txt`).

**Q: How do I manage environment variables?**

* Copy `.env.example` ‚Üí `.env`.
* Fill in values like DB connection string, OpenAI/Azure keys, Semantic Kernel configs.
* In Docker, env vars are loaded automatically via `docker-compose.yml` or Helm charts.

---

### **2. FastAPI Basics**

**Q: Where is the entrypoint for the API?**

* The main file is usually `src/main.py`, which initializes FastAPI and routes.

**Q: How are routes structured?**

* Routes live under `src/api/` or `src/routers/`.
* They are registered in `main.py`.

**Q: How do I add a new API endpoint?**

* Create a new file in `src/api/` (e.g., `src/api/my_route.py`).
* Define your route with `@router.get` / `@router.post`.
* Register the router in `main.py`.

**Q: How do I test APIs locally?**

* Use Swagger UI: `http://127.0.0.1:8000/docs`.
* Or use Postman/VS Code REST Client.

---

### **3. Semantic Kernel (AI Agents)**

**Q: What is Semantic Kernel used for here?**

* Orchestrating AI agents (chaining LLMs, plugins, memory, embeddings).
* Wrapping OpenAI/Azure models into reusable ‚Äúskills‚Äù for agents.

**Q: Where are Semantic Kernel skills and agents defined?**

* Typically in `src/agents/` or `src/skills/`.
* Each agent is a combination of prompt templates, plugins, and configuration.

**Q: How do I add a new agent?**

* Define a new skill/plugin in `src/skills/`.
* Register it in the agent orchestrator (`src/agents/manager.py`).
* Expose endpoints in FastAPI for calling the new agent.

**Q: How do agents get model context?**

* Context is pulled from the DB (using pgvector or FAISS) and passed to Semantic Kernel.
* Guardrails validate both input context and output before returning.

---

### **4. Database**

**Q: What database are we using?**

* **PostgreSQL** with `pgvector` for semantic search.

**Q: How do I connect to the DB?**

* Update `.env` with `DB_HOST`, `DB_PORT`, `DB_USER`, `DB_PASSWORD`, `DB_NAME`.
* Use async DB client (`asyncpg`).

**Q: How are migrations handled?**

* With **Liquibase** or **Alembic** (check `migrations/` folder).
* To run migrations:

  ```bash
  alembic upgrade head
  ```

---

### **5. Docker & Deployment**

**Q: How do I run the backend in Docker?**

* Build and run:

  ```bash
  docker-compose up --build
  ```

**Q: Why is DB connection failing in Docker?**

* Use the service name (e.g., `db`) instead of `localhost`.
* Check `docker-compose logs`.

**Q: How do I deploy to UAT/Prod?**

* Using Helm charts + Kubernetes.
* CI/CD pipelines (Azure DevOps) build and push Docker images, then deploy via Helm.

---

### **6. Async Pitfalls**

**Q: Why is my FastAPI request hanging?**

* You may be using blocking code (`time.sleep`, `requests`) inside `async def`. Use async alternatives (`asyncio.sleep`, `httpx`).

**Q: How do I avoid DB bottlenecks?**

* Use async DB drivers (`asyncpg`) with connection pooling.

**Q: How do I handle background tasks?**

* Use `asyncio.create_task()` carefully. Ensure tasks are awaited or cancelled during shutdown.

---

### **7. Troubleshooting**

**Q: How do I debug agent errors?**

* Check Semantic Kernel logs.
* Verify OpenAI/Azure API keys and deployment names.

**Q: What if imports fail?**

* Add `src/` to `PYTHONPATH`.
* Check for circular imports.

**Q: How do I troubleshoot Docker issues?**

* Rebuild images with `--no-cache`.
* Inspect logs with `docker-compose logs <service>`.

**Q: What if async errors show "event loop already running"?**

* Don‚Äôt call `asyncio.run()` inside FastAPI; just `await` coroutines.

---

üëâ Do you want me to also create a **1-page Quick Reference Sheet** (commands + folder structure + env vars) to complement this FAQ, so new developers can get up and running even faster?
