# semantic_kernel_agents/agents/linkedin_agent.py
import json
import requests
from bs4 import BeautifulSoup
from typing import List, Dict
from semantic_kernel.kernel import Kernel

class LinkedInAgent:
    def __init__(self, kernel: Kernel):
        self.search_url = "https://www.google.com/search"
        self.kernel = kernel

    def search_profiles(self, full_name: str, company: str, location: str) -> List[Dict]:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"
        }
        query = f"site:linkedin.com/in \"{full_name}\" \"{company}\" \"{location}\""
        params = {"q": query}

        response = requests.get(self.search_url, headers=headers, params=params)
        soup = BeautifulSoup(response.text, 'html.parser')
        result_blocks = soup.find_all('div', class_='tF2Cxc')

        profiles = []
        for block in result_blocks:
            title = block.find('h3')
            link = block.find('a')
            snippet = block.find('span', class_='aCOpRe')
            if title and link:
                profile_summary = self.kernel.run_text_completion(
                    f"Summarize this LinkedIn snippet: {snippet.text if snippet else title.text}"
                )
                profiles.append({
                    "profile_name": title.text,
                    "url": link['href'],
                    "summary": profile_summary
                })

        return profiles


# semantic_kernel_agents/agents/bing_search_agent.py
import requests
from typing import List, Dict
from semantic_kernel.kernel import Kernel

class BingSearchAgent:
    def __init__(self, api_key: str, kernel: Kernel):
        self.api_url = "https://www.searchapi.io/api/v1/search"
        self.api_key = api_key
        self.kernel = kernel

    def search_news(self, topic: str) -> List[Dict]:
        params = {
            "engine": "bing_news",
            "q": topic,
            "api_key": self.api_key
        }
        response = requests.get(self.api_url, params=params)
        results = response.json().get("news_results", [])

        summarized_results = []
        for article in results:
            snippet = article.get("snippet", "")
            summarized_snippet = self.kernel.run_text_completion(
                f"Summarize this news snippet: {snippet}"
            )
            summarized_results.append({
                "title": article.get("title"),
                "summary": summarized_snippet,
                "url": article.get("link"),
                "date": article.get("date")
            })

        return summarized_results


# semantic_kernel_agents/agents/writer_agent.py
from semantic_kernel.kernel import Kernel

class WriterAgent:
    def __init__(self, kernel: Kernel):
        self.kernel = kernel

    def generate_text(self, prompt: str) -> str:
        return self.kernel.run_text_completion(prompt)


# semantic_kernel_agents/agents/rag_agent.py
from typing import List, Dict
from semantic_kernel.kernel import Kernel

class RAGAgent:
    def __init__(self, kernel: Kernel):
        self.kernel = kernel

    def ingest_documents(self, documents: List[Dict]) -> Dict:
        for doc in documents:
            self.kernel.memory.save_information("rag_collection", doc["id"], doc["text"])
        return {"status": "ingested", "count": len(documents)}

    def query(self, user_query: str) -> Dict:
        results = self.kernel.memory.search("rag_collection", user_query, limit=3)
        combined_text = "\n".join([r.text for r in results])
        answer = self.kernel.run_text_completion(
            f"Answer the following based on context:\n{combined_text}\nQuestion: {user_query}"
        )
        return {"answer": answer, "sources": [r.key for r in results]}


# semantic_kernel_agents/agents/control_agent.py
from agents.linkedin_agent import LinkedInAgent
from agents.bing_search_agent import BingSearchAgent
from agents.writer_agent import WriterAgent
from agents.rag_agent import RAGAgent
import json

class ControlAgent:
    def __init__(self, linkedin: LinkedInAgent, bing: BingSearchAgent, writer: WriterAgent, rag: RAGAgent):
        self.linkedin = linkedin
        self.bing = bing
        self.writer = writer
        self.rag = rag

    def handle_request(self, full_name, company, location, topic) -> dict:
        profiles = self.linkedin.search_profiles(full_name, company, location)
        news = self.bing.search_news(topic)

        prompt = f"Generate a detailed report for {full_name} at {company}, {location}.\n\n"
        prompt += f"LinkedIn Profiles:\n{json.dumps(profiles, indent=2)}\n\nNews Articles:\n{json.dumps(news, indent=2)}"
        report = self.writer.generate_text(prompt)

        return {
            "report": report,
            "linkedIn_profiles": profiles,
            "news_articles": news
        }


# semantic_kernel_agents/services/embedding_service.py
from semantic_kernel.connectors.ai.hugging_face import HuggingFaceTextEmbedding

def get_embedding_service():
    return HuggingFaceTextEmbedding(
        service_id="hf-embedder",
        ai_model_id="sentence-transformers/all-MiniLM-L6-v2"
    )


# semantic_kernel_agents/services/completion_service.py
from semantic_kernel.connectors.ai.open_ai import OpenAITextCompletion

def get_completion_service(api_key: str):
    return OpenAITextCompletion(
        service_id="openai",
        api_key=api_key,
        ai_model_id="gpt-4"
    )


# semantic_kernel_agents/main.py
from semantic_kernel.kernel import Kernel
from semantic_kernel.connectors.memory.chroma import ChromaStore
from agents.linkedin_agent import LinkedInAgent
from agents.bing_search_agent import BingSearchAgent
from agents.writer_agent import WriterAgent
from agents.rag_agent import RAGAgent
from agents.control_agent import ControlAgent
from services.embedding_service import get_embedding_service
from services.completion_service import get_completion_service
import json

OPENAI_API_KEY = "dummy-openai-api-key"
SERP_API_KEY = "dummy-serp-api-key"

# Initialize Kernel
kernel = Kernel()
kernel.add_service(get_completion_service(OPENAI_API_KEY))
kernel.add_service(get_embedding_service())
kernel.add_memory(ChromaStore())

# Initialize agents
linkedin_agent = LinkedInAgent(kernel)
bing_agent = BingSearchAgent(api_key=SERP_API_KEY, kernel=kernel)
writer_agent = WriterAgent(kernel)
rag_agent = RAGAgent(kernel)
control_agent = ControlAgent(linkedin_agent, bing_agent, writer_agent, rag_agent)

# Run example request
if __name__ == "__main__":
    output = control_agent.handle_request(
        full_name="Alice Smith",
        company="Contoso Ltd.",
        location="Seattle, WA",
        topic="renewable energy"
    )
    print(json.dumps(output, indent=2))
