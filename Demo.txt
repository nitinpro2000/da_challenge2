import os
from azure.identity import DefaultAzureCredential
from azure.ai.openai import ChatCompletionsClient

class NewsRegeneration:
    """
    NewsRegeneration handles incoming user prompts and decides whether to:
    - Make small edits to existing news content (formatting, grammar, minor rewording)
    - Fully regenerate news content using Bing Search grounding if the prompt requests something new or if the prompt is empty

    Uses Azure OpenAI to classify the request and execute the appropriate logic.
    """

    def __init__(self, azure_openai_endpoint, azure_openai_key, deployment_name):
        """
        Initialize the NewsRegeneration instance.

        :param azure_openai_endpoint: Endpoint URL for Azure OpenAI service.
        :param azure_openai_key: API key for Azure OpenAI service.
        :param deployment_name: Model deployment name (e.g., 'gpt-4o').
        """
        self.client = ChatCompletionsClient(
            endpoint=azure_openai_endpoint,
            credential=DefaultAzureCredential() if not azure_openai_key else azure_openai_key
        )
        self.deployment_name = deployment_name

    def classify_request(self, user_prompt, existing_content):
        """
        Use LLM to decide whether the user request requires:
        - 'edit': Apply changes to existing content
        - 'regenerate': Generate entirely new content

        **LLM Prompt Design Guidelines:**
        - If `user_prompt` is empty: Always return 'regenerate'
        - If the prompt requests only formatting, grammar fixes, style adjustments, or rewording → return 'edit'
        - If the prompt requests new details, different data, updated timeline, or a change in topic → return 'regenerate'

        :param user_prompt: The user's current request as a string.
        :param existing_content: The existing news content (if any).
        :return: 'edit' or 'regenerate'
        """
        if not user_prompt.strip():
            return "regenerate"

        classification_prompt = f"""
You are a decision-making assistant.
You will be given:
1. A user prompt (what the user wants now)
2. The existing news content

Your task: Decide whether to 'edit' the existing content or 'regenerate' entirely.
Rules:
- If the prompt is about formatting, grammar, styling, or minor rewriting without changing the topic → return 'edit'
- If the prompt asks for NEW data, updated events, different companies, industries, or dates → return 'regenerate'
- Always respond with ONLY the word: edit OR regenerate

User Prompt: {user_prompt}
Existing Content: {existing_content if existing_content else '[EMPTY]'}
"""
        response = self.client.create(
            model=self.deployment_name,
            messages=[{"role": "user", "content": classification_prompt}],
            max_tokens=10,
            temperature=0
        )
        return response.choices[0].message["content"].strip().lower()

    def generate_news_with_bing(self, regeneration_prompt):
        """
        Regenerate news content using Bing Search grounding.

        **Guidelines for the LLM:**
        - Search for the latest news relevant to the regeneration prompt
        - Summarize and synthesize information in 300–400 words
        - Include risk factors, theme validation, market trends, and future outlook (18 months)
        - Maintain factual accuracy and cite reputable sources when possible

        :param regeneration_prompt: The regeneration request prompt.
        :return: Newly generated news content as a string.
        """
        # TODO: Implement Bing Search grounding integration
        return f"[Regenerated news content for: {regeneration_prompt}]"

    def edit_existing_content(self, user_prompt, existing_content):
        """
        Apply small edits to existing content using LLM.

        **Editing Guidelines for the LLM:**
        - Only modify formatting, grammar, style, or flow
        - Preserve the factual meaning and details
        - Do not introduce new facts unless explicitly provided in user prompt

        :param user_prompt: Editing instructions from the user.
        :param existing_content: The original news content.
        :return: Updated news content as a string.
        """
        editing_prompt = f"""
You are an editing assistant.
You will be given:
1. A piece of existing news content
2. A set of editing instructions

Apply the edits without changing the factual meaning.

Editing Instructions: {user_prompt}
Existing Content: {existing_content}
"""
        response = self.client.create(
            model=self.deployment_name,
            messages=[{"role": "user", "content": editing_prompt}],
            max_tokens=1000,
            temperature=0.5
        )
        return response.choices[0].message["content"]

    def handle_request(self, user_prompt, existing_content=None):
        """
        Handle an incoming user request by deciding whether to edit or regenerate.

        :param user_prompt: The user's request string.
        :param existing_content: Current news content (if any).
        :return: Final news content string.
        """
        decision = self.classify_request(user_prompt, existing_content)
        if decision == "regenerate":
            return self.generate_news_with_bing(user_prompt)
        else:
            return self.edit_existing_content(user_prompt, existing_content)
