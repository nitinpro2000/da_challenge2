import re
from typing import Dict, List, Tuple

def update_citations(
    citation_dict: Dict[str, str],
    text_list: List[str],
    citation_count: int = 11
) -> Tuple[Dict[str, str], List[str], int]:
    """
    Updates citation numbers in both citation_dict and text_list so that
    numbering starts from citation_count, even if dict is empty.

    Args:
        citation_dict (dict): Keys as strings ("1", "2", ...) and values as URLs.
        text_list (list): List of strings possibly containing citations like [1], [2], etc.
        citation_count (int): Starting number for updated citations.

    Returns:
        tuple: (updated_dict, updated_text_list, new_citation_count)
    """

    # Regex to find all citations in list
    pattern = re.compile(r"\[(\d+)\]")
    found_citations = sorted(set(int(m) for text in text_list for m in pattern.findall(text)))

    # Build mapping from old -> new numbers
    mapping = {str(old): str(citation_count + i) for i, old in enumerate(found_citations)}

    # Update dict keys if dict is not empty
    updated_dict = {mapping.get(old_key, old_key): url for old_key, url in citation_dict.items()}

    # Replace in text list
    def replace_citation(match):
        old_num = match.group(1)
        return f"[{mapping.get(old_num, old_num)}]"

    updated_text_list = [pattern.sub(replace_citation, text) for text in text_list]

    # New citation count after update
    new_citation_count = citation_count + len(found_citations)

    return updated_dict, updated_text_list, new_citation_count


# Example usage
citation_dict = {
    "1": "https://example.com/a",
    "3": "https://example.com/c"
}

text_list = [
    "This is a sentence...[1]",
    "Another statement referencing...[2] and also...[3]"
]

new_dict, new_list, new_count = update_citations(citation_dict, text_list, citation_count=11)

print("Updated Dict:", new_dict)
print("Updated Text List:", new_list)
print("Next Citation Count:", new_count)
