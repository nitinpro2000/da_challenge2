<rail version="0.1">
    <input>
        <Text name="prompt"/>
    </input>
    <output>
        <Text name="content">
            <Check input="content" type="pii" on_fail="exception"/>
        </Text>
    </output>
    <prompt>
        Use the following prompt to generate content.
    </prompt>
</rail>


from guardrails import Guard

guard = Guard.from_pydantic(output_class=dict)
guard.add_check("content", "pii", on_fail="exception")


from guardrails import Guard

# Load the rail (change if you want to use Python-based config)
guard = Guard.from_rail("pii_guard.rail")

# General wrapper
def with_guardrails(func):
    def wrapper(prompt: str, *args, **kwargs):
        # Call the original function
        content = func(prompt, *args, **kwargs)

        # Validate content with guardrails
        try:
            validated = guard(prompt=prompt, content=content)
            return validated["content"]
        except Exception as e:
            print(f"[Guardrails] Blocked output from '{func.__name__}':", str(e))
            return "⚠️ Content blocked due to PII or policy violation."
    return wrapper

@with_guardrails
def generate_news_summary(prompt: str) -> str:
    return f"Breaking news: CEO's number is 9876543210."

@with_guardrails
def generate_client_report(prompt: str) -> str:
    return f"Client John Doe lives at 123 Main Street."

@with_guardrails
def generate_industry_insights(prompt: str) -> str:
    return f"The retail industry shows strong growth."

# Use the wrapped functions
print(generate_news_summary("Summarize today's company news."))
print(generate_client_report("Give full client details."))
print(generate_industry_insights("What's happening in retail?"))
