def extract_keywords(company_name: str, focus: str, openai_client: OpenAI, max_keywords: int = 5) -> list:
    """
    Uses OpenAI LLM to generate optimized search queries for a company focused on business events.

    Args:
        company_name (str): Name of the company.
        focus (str): Topical focus area (can be ignored by LLM if prompt covers event types).
        openai_client (OpenAI): Initialized OpenAI client with API key configured.
        max_keywords (int, optional): Maximum number of keyword queries to return. Defaults to 5.

    Returns:
        list: List of search query strings.
    """
    logging.info(f"Generating search queries for company: {company_name} (max {max_keywords})")

    system_prompt = """You are a Query Generation Agent. Your role is to create optimized search queries for a given company name. The purpose of these queries is to retrieve of news articles and web pages containing relevant, up-to-date information on key business activities. Your output must be a "list of strings only-no explanations, formatting, or additional text." For each query, ensure it is structured in a way that increases the likelihood of retrieving information related to the following categories:

1. Personnel Turnover or C-Level Hires: Focus on executive changes, new appointments, or high-profile departures.
2. Mergers and Acquisitions: Include both confirmed and rumored M&A activity involving the company.
3. Financial News: Target general financial developments, including stock movement, market positioning, or macroeconomic implications for the company
4. Earnings Reports: Include earnings announcements, quarterly/annual financial results, revenue/profit analysis, and investor calls.
5. Analyst Reports: Look for growth forecasts, evaluations of product/service lines, and analyst expectations or revisions.
6. Public Fund Clients (if applicable): Search for board meeting minutes or notes discussing organizational concerns, staff freezes, pension fund decisions, budget trends, and strategic goals.

Instructions:
- Use keywords like "[Company Name] [event keyword]" to structure queries.
- Include variations for each event type (e.g., "leadership change," "CEO hire," "earnings call," "merger talks").
- Output must be a Python-style list of search query strings, e.g., ["query 1", "query 2", ..., "query n"]
- Generate multiple queries per company to increase coverage.
- Only output the list.
"""

    user_prompt = f"{company_name}"

    response = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        temperature=0.3
    )

    try:
        raw_list = eval(response.choices[0].message.content)
        cleaned_list = [q.strip() for q in raw_list if isinstance(q, str)]
        return cleaned_list[:max_keywords]
    except Exception as e:
        logging.error(f"Failed to parse search queries: {e}")
        return []
