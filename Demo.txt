import psycopg2
import snowflake.connector
import requests


class TestConnections:
    """
    Class to test connections for Postgres, Snowflake, and Azure OpenAI.
    Runs a small query/request to ensure the service is functional.
    """

    def __init__(self, postgres_config=None, snowflake_config=None, azure_openai_config=None):
        self.postgres_config = postgres_config
        self.snowflake_config = snowflake_config
        self.azure_openai_config = azure_openai_config

    def test_postgres(self):
        """Test PostgreSQL connection and run a sample query."""
        try:
            conn = psycopg2.connect(
                host=self.postgres_config["host"],
                port=self.postgres_config.get("port", 5432),
                dbname=self.postgres_config["dbname"],
                user=self.postgres_config["user"],
                password=self.postgres_config["password"]
            )
            cur = conn.cursor()
            cur.execute("SELECT version();")  # simple query
            version = cur.fetchone()[0]
            conn.close()
            return True, f"Postgres connection successful. Version: {version}"
        except Exception as e:
            return False, f"Postgres connection failed: {e}"

    def test_snowflake(self):
        """Test Snowflake connection and run a sample query."""
        try:
            conn = snowflake.connector.connect(
                user=self.snowflake_config["user"],
                password=self.snowflake_config["password"],
                account=self.snowflake_config["account"],
                warehouse=self.snowflake_config.get("warehouse"),
                database=self.snowflake_config.get("database"),
                schema=self.snowflake_config.get("schema"),
            )
            cur = conn.cursor()
            cur.execute("SELECT CURRENT_VERSION();")
            version = cur.fetchone()[0]
            conn.close()
            return True, f"Snowflake connection successful. Version: {version}"
        except Exception as e:
            return False, f"Snowflake connection failed: {e}"

    def test_azure_openai(self):
        """Test Azure OpenAI endpoint connection with a small prompt."""
        try:
            url = f"{self.azure_openai_config['endpoint']}/openai/deployments/{self.azure_openai_config['deployment_name']}/chat/completions?api-version={self.azure_openai_config['api_version']}"
            headers = {
                "Content-Type": "application/json",
                "api-key": self.azure_openai_config["api_key"]
            }
            data = {
                "messages": [{"role": "user", "content": "Say 'pong' if you can read this."}],
                "max_tokens": 5
            }
            response = requests.post(url, headers=headers, json=data, timeout=10)

            if response.status_code == 200:
                text = response.json()["choices"][0]["message"]["content"]
                return True, f"Azure OpenAI connection successful. Response: {text}"
            else:
                return False, f"Azure OpenAI connection failed: {response.status_code}, {response.text}"
        except Exception as e:
            return False, f"Azure OpenAI connection failed: {e}"

    def test_all(self):
        """
        Run all connection tests and return results as a dict.
        This ensures one failure doesn't stop other checks.
        """
        results = {}
        if self.postgres_config:
            results["Postgres"] = self.test_postgres()
        if self.snowflake_config:
            results["Snowflake"] = self.test_snowflake()
        if self.azure_openai_config:
            results["AzureOpenAI"] = self.test_azure_openai()
        return results


if __name__ == "__main__":
    postgres_cfg = {
        "host": "localhost",
        "port": 5432,
        "dbname": "postgres",
        "user": "postgres",
        "password": "postgres"
    }

    snowflake_cfg = {
        "user": "dummy_user",
        "password": "dummy_pass",
        "account": "dummy_account",
        "warehouse": "dummy_wh",
        "database": "dummy_db",
        "schema": "dummy_schema"
    }

    azure_openai_cfg = {
        "endpoint": "https://your-resource-name.openai.azure.com",
        "api_key": "dummy_key",
        "deployment_name": "gpt-35-turbo",
        "api_version": "2024-05-01-preview"
    }

    tester = TestConnections(postgres_cfg, snowflake_cfg, azure_openai_cfg)
    results = tester.test_all()

    print("\nConnection Test Results:")
    for service, (ok, message) in results.items():
        print(f"{service}: {message}")
