import logging
from fastapi import Response
import asyncpg

logger = logging.getLogger(__name__)

class InvalidUserMemosException(Exception):
    """
    Custom exception raised for errors related to retrieving user memos.
    
    Attributes:
        error (str): Description of the error.
    """
    def __init__(self, error):
        self.error = error
        super().__init__(str(error))


class ListRecentMemos:
    """
    A service class responsible for retrieving the most recent memos 
    associated with a given user from a PostgreSQL database.

    Methods:
        fetch_recent_memos(user_id: str, limit: int = 2):
            Asynchronously fetches recent memos for a user, ordered by last update.
    """

    async def fetch_recent_memos(user_id: str, limit: int = 2):
        """
        Fetches a limited number of recent memos for a specified user from the database.

        Parameters:
            user_id (str): The ID of the user whose memos are to be fetched.
            limit (int): The maximum number of memos to retrieve. Default is 2.

        Returns:
            List[dict]: A list of memo records represented as dictionaries.

        Raises:
            ValueError: If the user_id is not provided.
            InvalidUserMemosException: If a database or unexpected error occurs.
        """
        try:
            logger.info(f"Received request for user_id: {user_id}, limit: {limit}")

            if not user_id:
                raise ValueError("Missing user_id data")

            conn = await asyncpg.connect(async_db_connection_url)
            try:
                rows = await conn.fetch(f"""
                    SELECT memo_id, processing_status, template_type, updated_at, 
                           meeting_details_input, client_profile
                    FROM memos
                    WHERE user_id = $1
                    ORDER BY updated_at DESC
                    LIMIT $2;
                """, user_id, limit)

                return [dict(row) for row in rows]
            finally:
                await conn.close()

        except ValueError as e:
            logger.error(f"Validation error: {e}")
            raise e

        except asyncpg.exceptions.PostgresError as e:
            logger.error(f"Database error: {e}")
            raise InvalidUserMemosException(f"Database operation failed: {e}")

        except Exception as e:
            logger.error(f"An unexpected error occurred: {e}")
            raise InvalidUserMemosException(f"An unexpected error occurred: {e}")
