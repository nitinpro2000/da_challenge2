from flask import Flask, request, jsonify
import logging
from datetime import datetime

app = Flask(__name__)

# Configure logging
logging.basicConfig(
    filename='create_new_memo.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

@app.route('/create-new-memo', methods=['POST'])
def create_new_memo():
    try:
        token = request.headers.get('Authorization', None)
        if not token or not token.startswith('Bearer '):
            logging.warning("Unauthorized access attempt: Missing or invalid token.")
            return jsonify({
                "details": None,
                "errors": [{
                    "code": "Unauthorized",
                    "message": "Unauthorized: invalid or missing token"
                }]
            }), 401

        data = request.get_json()
        logging.info(f"Received request: {data}")

        required_common_fields = ['user_id', 'template_type', 'client_name']
        for field in required_common_fields:
            if field not in data:
                msg = f"Missing required field: {field}"
                logging.error(msg)
                return jsonify({
                    "detail": [{"loc": [field], "msg": msg, "type": "missing_field"}]
                }), 422

        template_type = data['template_type']

        if template_type == 'client_template':
            required_fields = ['key_areas_for_discussion', 'key_client_contacts']
            for field in required_fields:
                if field not in data:
                    msg = f"Missing required field: {field}"
                    logging.error(msg)
                    return jsonify({
                        "detail": [{"loc": [field], "msg": msg, "type": "missing_field"}]
                    }), 422

        elif template_type == 'client_memo':
            memo_required = ['memo_title', 'meeting_details', 'attendees']
            for field in memo_required:
                if field not in data:
                    msg = f"Missing required field: {field}"
                    logging.error(msg)
                    return jsonify({
                        "detail": [{"loc": [field], "msg": msg, "type": "missing_field"}]
                    }), 422

            meeting_details = data['meeting_details']
            meeting_required = ['date', 'time', 'in_person', 'purpose', 'key_areas_for_discussion']
            for field in meeting_required:
                if field not in meeting_details:
                    msg = f"Missing meeting_details field: {field}"
                    logging.error(msg)
                    return jsonify({
                        "detail": [{"loc": [f"meeting_details.{field}"], "msg": msg, "type": "missing_field"}]
                    }), 422

            attendees = data['attendees']
            if not isinstance(attendees, list) or len(attendees) == 0:
                msg = "attendees must be a non-empty list"
                logging.error(msg)
                return jsonify({
                    "detail": [{"loc": ["attendees"], "msg": msg, "type": "value_error"}]
                }), 422

            for i, attendee in enumerate(attendees):
                if 'client' not in attendee or 'nt' not in attendee:
                    msg = "Each attendee must have 'client' and 'nt'"
                    logging.error(msg)
                    return jsonify({
                        "detail": [{"loc": [f"attendees[{i}]"], "msg": msg, "type": "missing_field"}]
                    }), 422

        else:
            msg = f"Invalid template_type: {template_type}"
            logging.error(msg)
            return jsonify({
                "detail": [{"loc": ["template_type"], "msg": msg, "type": "value_error"}]
            }), 422

        response = {
            "template_id": "12345",
            "client_name": data['client_name'],
            "status": "processing"
        }
        logging.info(f"Success: {response}")
        return jsonify(response), 200

    except Exception as e:
        logging.exception("Internal Server Error")
        return jsonify({
            "detail": {
                "code": "Internal Server Error",
                "message": "Something went wrong while internal memo creation, please try again."
            }
        }), 500


if __name__ == '__main__':
    app.run(debug=True)
