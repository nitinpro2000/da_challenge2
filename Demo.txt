from functools import wraps
import logging
from fastapi.responses import JSONResponse

# Setup logger
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def handle_exceptions(custom_message: str = "Something went wrong"):
    """
    Common decorator to handle exceptions in APIs.
    Allows passing a custom error message.
    """
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                logger.exception(f"Error in {func.__name__}: {str(e)}")
                return JSONResponse(
                    status_code=500,
                    content={"error": custom_message, "details": str(e)}
                )

        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                logger.exception(f"Error in {func.__name__}: {str(e)}")
                return JSONResponse(
                    status_code=500,
                    content={"error": custom_message, "details": str(e)}
                )

        # Return correct wrapper depending on whether func is async or not
        return async_wrapper if callable(getattr(func, "__await__", None)) else sync_wrapper
    return decorator
