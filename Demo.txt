class Observability:
    """
    Class for tracking and recording observability metrics such as execution time, status,
    exceptions, and function-level analytics.

    It uses an async PostgreSQL database connection to persist logs and provides a decorator 
    to easily instrument async functions for tracking.
    
    Attributes:
        db_config (str): The async database connection URL.
        db_pool (asyncpg.Pool): Connection pool for executing insert queries.
    """

    def __init__(self):
        """
        Initializes the Observability class with DB config and sets up the pool placeholder.
        """
        self.db_config = async_db_connection_url()
        self.db_pool = None

    async def init_db_pool(self):
        """
        Initializes the async database connection pool if it hasn't been initialized already.

        This is called automatically inside the tracking decorator before inserting any metrics.
        """
        ...

    async def insert_metric(
        self,
        timestamp: datetime.datetime,
        function_name: str,
        time_taken: float,
        status: str,
        exception_msg: str,
        params: dict
    ):
        """
        Inserts execution metrics into the database.

        Args:
            timestamp (datetime): The time when the function was executed.
            function_name (str): Name of the function being tracked.
            time_taken (float): Execution duration in seconds.
            status (str): 'success' or 'failure' indicating the result.
            exception_msg (str): Exception message if any, else None or empty.
            params (dict): Parameters passed to the function (serialized or as JSON).
        
        Returns:
            None
        """
        ...

    def track(self, name: str):
        """
        A decorator to automatically track execution time, success/failure, and exceptions
        for asynchronous functions.

        Args:
            name (str): Name of the function or label to record in the metrics table.

        Returns:
            Callable: The decorated async function with tracking applied.
        """
        def decorator(func):
            @wraps(func)
            async def wrapper(*args, **kwargs):
                await self.init_db_pool()
                start_time = time.time()
                status = "success"
                exception_msg = ""
                result = None

                try:
                    result = await func(*args, **kwargs)
                except Exception as e:
                    status = "failure"
                    exception_msg = str(e)
                    raise
                finally:
                    end_time = time.time()
                    time_taken = end_time - start_time
                    timestamp = datetime.datetime.utcnow()
                    params = {"args": args, "kwargs": kwargs}

                    await self.insert_metric(
                        timestamp, name, time_taken, status, exception_msg, params
                    )

                return result

            return wrapper

        return decorator
