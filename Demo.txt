import json

# Input JSON
input_json = {
    "TC.NO": {"0": 1.0, "1": None, "2": None, "3": 2.8, "4": None, "5": None},
    "Test Description": {
        "0": "Validate that User is able to see Partyname in Authorization tab for a policy",
        "1": None,
        "2": None,
        "3": "Validate that User is able to see Partyname in Authorization tab for a case",
        "4": None,
    },
    "Test Steps": {
        "0": "Login to FAST with valid credentials",
        "1": "Submit and issue a Cash annuity app.",
        "2": "Verify user is able to see the PartyName (agent name/contract name) in Authorization tab.",
        "3": "Login to FAST with valid credentials",
        "4": "Submit and issue a Cash annuity app.",
        "5": "Verify user is able to see the PartyName (agent name/contract name) in Authorization tab.",
    },
    "Expected Results": {
        "0": "FAST should be logged in successfully.",
        "1": "Case is created.",
        "2": "User is able to see the PartyName (agent name/contract name) in Authorization tab.",
        "3": "FAST should be logged in successfully.",
        "4": None,
        "5": None,
    },
}

# Function to generate the output string
def generate_test_cases(input_json):
    result = []
    last_valid_description = None
    test_steps = []
    expected_results = []
    step_number = 1  # Reset step number for each description
    result_number = 1  # Reset result number for each description

    for key, test_case in input_json["TC.NO"].items():
        # Handle null descriptions
        description = input_json["Test Description"].get(key)
        if description is not None:
            if last_valid_description:
                # Add accumulated steps and results for the previous description
                result.append(f"Test Description: {last_valid_description}")
                result.append("Test Steps:")
                result.extend(test_steps)
                result.append("Expected Results:")
                result.extend(expected_results)
                result.append("")  # Empty line between descriptions
            # Reset for the new description
            last_valid_description = description
            test_steps = []
            expected_results = []
            step_number = 1  # Reset step number
            result_number = 1  # Reset result number

        # Accumulate steps and results
        step = input_json["Test Steps"].get(key)
        if step:
            test_steps.append(f"{step_number}. {step}")
            step_number += 1
        expected = input_json["Expected Results"].get(key)
        if expected:
            expected_results.append(f"{result_number}. {expected}")
            result_number += 1

    # Add the final description's steps and results
    if last_valid_description:
        result.append(f"Test Description: {last_valid_description}")
        result.append("Test Steps:")
        result.extend(test_steps)
        result.append("Expected Results:")
        result.extend(expected_results)

    return "\n".join(result)


# Generate and print the output string
output_string = generate_test_cases(input_json)
print(output_string)
