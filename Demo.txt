import re

async def get_company_summary(self):
    try:
        citation_dict = {}

        # Fetch pre-generated markdown summary for the company from DB
        markdown_text = await db_manager.fetch(FETCH_PREGENERATED_SUMMARY, self.client_name_org)

        # ✅ Match formats like [[1]](url "title") or [\[1\]](url "title")
        pattern = re.compile(
            r"\[+\s*\\?\[?(\d+)\\?\]?\s*\]+\s*\((.*?)\s*(?:\"(.*?)\")?\)"
        )

        def replacer(match):
            num, url, title = match.groups()
            url = url.strip()
            title = (title or "").strip()

            # Store as list [url, title]
            if num not in citation_dict:
                citation_dict[num] = [url, title]

            # ✅ Return clean single-bracket citation like [1]
            return f"[{num}]"

        # Extract content from DB record
        content = markdown_text[0].get('content')

        # Replace markdown-style citations with [1], [2], etc.
        clean_text = pattern.sub(replacer, content)

        # Update citation counter
        if citation_dict:
            self.citation_count['value'] = max(map(int, citation_dict.keys())) + 1

        return clean_text, citation_dict

    except Exception as e:
        self.logger.info(f'Company Summary generation failed due to: {e}')
