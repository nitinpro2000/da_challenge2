from fastapi import FastAPI, HTTPException, Path, Query
from pydantic import BaseModel
from typing import List, Optional

app = FastAPI(title="Client Memo Management API")


# ====== Data Models ======
class Memo(BaseModel):
    id: int
    client_name: str
    content: str
    status: str  # e.g., "processed", "pending"
    created_at: str


class Contact(BaseModel):
    name: str
    contact_type: str  # e.g., "client", "consultant"


# ====== Mock Data ======
memos_db = []
clients_db = ["ABC Corp", "XYZ Ltd"]
contacts_db = {
    "ABC Corp": [
        {"name": "John Doe", "contact_type": "client"},
        {"name": "Jane Smith", "contact_type": "consultant"}
    ]
}


# ====== API Endpoints ======

@app.post("/memos", response_model=Memo)
async def create_memo(memo: Memo):
    memos_db.append(memo)
    return memo


@app.get("/memos/{memo_id}/status")
async def get_check_processing_status(memo_id: int = Path(..., gt=0)):
    for memo in memos_db:
        if memo.id == memo_id:
            return {"id": memo_id, "status": memo.status}
    raise HTTPException(status_code=404, detail="Memo not found")


@app.get("/memos/{memo_id}", response_model=Memo)
async def get_memo_data(memo_id: int):
    for memo in memos_db:
        if memo.id == memo_id:
            return memo
    raise HTTPException(status_code=404, detail="Memo not found")


@app.get("/memos", response_model=List[Memo])
async def list_memos(status: Optional[str] = Query(None)):
    if status:
        return [memo for memo in memos_db if memo.status == status]
    return memos_db


@app.get("/memos/recent", response_model=List[Memo])
async def list_recent_memos(limit: int = 5):
    # Assuming sorted by created_at in real-world usage
    return memos_db[-limit:]


@app.get("/clients/names", response_model=List[str])
async def get_client_names():
    return clients_db


@app.get("/clients/{client_name}/contacts", response_model=List[Contact])
async def get_client_contacts(client_name: str):
    contacts = contacts_db.get(client_name)
    if not contacts:
        raise HTTPException(status_code=404, detail="Client not found or no contacts")
    return contacts
