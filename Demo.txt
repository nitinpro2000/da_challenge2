Here‚Äôs a **user story and technical description** for updating all APIs and agents in your system to use **Azure AD (Microsoft Entra ID) tokens** instead of **API keys** for authenticating Azure OpenAI connections:

---

## ‚úÖ **User Story**

**Title**: Replace Azure OpenAI API key authentication with Azure AD (Microsoft Entra ID) token authentication in all APIs and agents

**As a** platform engineer,
**I want** to update the authentication mechanism for Azure OpenAI connections in all APIs and agents from static API key usage to Azure Active Directory token-based authentication,
**so that** we improve security, enable centralized identity management, reduce the risk of credential leakage, and adhere to enterprise compliance policies.

---

## üìò **Description / Technical Details**

### üîÅ **Current State:**

* Azure OpenAI clients are initialized using static API keys hardcoded in config files or passed via environment variables.
* Tokens are not scoped or identity-bound, and accidental leaks could compromise system-wide access.
* No RBAC or fine-grained access control is in place for specific models, deployments, or applications.

### üîÑ **Target State:**

* Azure OpenAI clients are initialized using a **bearer token** acquired via Azure AD, scoped with proper permissions.
* This access token is retrieved dynamically using either:

  * **Managed Identity (for agents, APIs on Azure)**
  * **Client Credentials Flow (for local apps or services)** using `DefaultAzureCredential` or `ClientSecretCredential` from `azure.identity`
* Token is passed in the header of each OpenAI request (`Authorization: Bearer <token>`).
* API key is **completely removed** from configs, pipelines, and code.

---

## üî® **Implementation Tasks**

### 1. **Register Azure AD App**

* Register an app in Azure Active Directory with the right permissions:

  * `https://cognitiveservices.azure.com/.default` scope
  * Assign the app permission to the Azure OpenAI resource using **RBAC** (`Cognitive Services User` role).

### 2. **Update Authentication Flow**

* Use `DefaultAzureCredential()` for workloads running in Azure.
* Use `ClientSecretCredential` for workloads running outside Azure (e.g., local dev).

```python
from azure.identity import DefaultAzureCredential
from openai import AzureOpenAI

client = AzureOpenAI(
    api_version="2024-02-01",
    azure_endpoint="https://<your-resource>.openai.azure.com",
    azure_ad_token_provider=DefaultAzureCredential()
)
```

> Ensure that `azure_ad_token_provider` is supported (from `openai` >= 1.25.0 or newer SDKs).

### 3. **Update All API Endpoints and Agents**

* Refactor all instances where `AzureOpenAI` or `OpenAI` client is initialized.
* Remove API key references from code, `.env`, and secrets manager.
* Replace them with Azure AD token-based credential injection.

### 4. **Update CI/CD Pipelines**

* Inject `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, and `AZURE_CLIENT_SECRET` or enable managed identity in deployment targets.
* Validate token acquisition and OpenAI connection in deployment smoke tests.

### 5. **Secure and Audit**

* Rotate and disable old API keys.
* Audit access logs for any legacy key usage.
* Set up alerts in Azure Monitor for unauthorized token failures or expired credentials.

---

## ‚úÖ **Acceptance Criteria**

| Criteria        | Description                                                                      |
| --------------- | -------------------------------------------------------------------------------- |
| üîê Security     | No API key usage in any part of the code or config                               |
| ‚úÖ Functionality | All agents and APIs can still access Azure OpenAI models via authenticated calls |
| üß™ Tested       | End-to-end tested in dev, staging, and prod with real tokens                     |
| üì¶ Scalable     | Supports both managed identity and service principal-based access                |
| üìú Logged       | Token acquisition failures and usage are logged for monitoring                   |

---

Let me know if you'd like this as a **Word document** or want me to generate sample code and CI steps as well.
