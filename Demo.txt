import asyncpg

class PostgresDB:
    def __init__(self, db_url: str):
        self.db_url = db_url

    async def _connect(self):
        return await asyncpg.connect(self.db_url)

    async def insert_user(self, name: str, age: int):
        conn = await self._connect()
        try:
            await conn.execute(
                "INSERT INTO users (name, age) VALUES ($1, $2)",
                name, age
            )
        finally:
            await conn.close()

    async def update_user_name(self, user_id: int, new_name: str):
        conn = await self._connect()
        try:
            await conn.execute(
                "UPDATE users SET name = $1 WHERE id = $2",
                new_name, user_id
            )
        finally:
            await conn.close()

    async def select_user_by_id(self, user_id: int):
        conn = await self._connect()
        try:
            row = await conn.fetchrow(
                "SELECT id, name, age FROM users WHERE id = $1",
                user_id
            )
            if row:
                return dict(row)
            else:
                return None
        finally:
            await conn.close()


from fastapi import FastAPI, HTTPException
from database import PostgresDB

app = FastAPI()

db = PostgresDB("postgresql://user:password@localhost:5432/mydatabase")

@app.post("/insert/")
async def insert_user(name: str, age: int):
    try:
        await db.insert_user(name, age)
        return {"message": "User inserted"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.put("/update/")
async def update_user(user_id: int, name: str):
    try:
        await db.update_user_name(user_id, name)
        return {"message": "User updated"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/user/{user_id}")
async def get_user(user_id: int):
    try:
        user = await db.select_user_by_id(user_id)
        if not user:
            raise HTTPException(status_code=404, detail="User not found")
        return user
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
