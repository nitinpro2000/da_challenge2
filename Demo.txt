import uuid
import json
import threading
from datetime import datetime
import psycopg2

# ----------------------------
# Simulated content generation
# ----------------------------
def generate_content(meeting_details, attendees):
    """
    Simulates content generation using meeting details and attendees.
    Replace with actual logic like an LLM call or external API.
    """
    import time
    time.sleep(5)  # Simulate processing time
    return {
        "summary": "Generated summary for Q2 performance meeting.",
        "status": "Completed"
    }

# --------------------------------------
# Background updater for memo processing
# --------------------------------------
def update_memo_record(memo_id, meeting_details, attendees, conn_params):
    """
    Runs in background to generate content and update the memo.
    Updates processing_status to 'Completed' or 'Error'.
    """
    try:
        # Generate content
        content = generate_content(meeting_details, attendees)

        # Connect and update memo
        conn = psycopg2.connect(**conn_params)
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE cledev.memos
            SET generated_content = %s,
                processing_status = 'Completed',
                updated_at = NOW(),
                error_message = NULL
            WHERE memo_id = %s
        """, (json.dumps(content), str(memo_id)))
        conn.commit()
        cursor.close()
        conn.close()

    except Exception as e:
        # On error, update status and store error message
        conn = psycopg2.connect(**conn_params)
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE cledev.memos
            SET processing_status = 'Error',
                updated_at = NOW(),
                error_message = %s
            WHERE memo_id = %s
        """, (str(e), str(memo_id)))
        conn.commit()
        cursor.close()
        conn.close()

# -------------------------
# Main insert memo function
# -------------------------
def insert_memo(request_json, conn_params):
    """
    Inserts a new memo into cledev.memos with 'Processing' status.
    Triggers background thread to generate content.
    """
    # Extract fields
    user_id = request_json.get("userId")  # e.g., "user_002"
    client_name = request_json.get("client_name")
    memo_title = request_json.get("memo_title")
    template_type = request_json.get("template_type")
    meeting_details = request_json.get("meeting_details")
    attendees = request_json.get("attendees")

    # Generate unique memo ID and timestamps
    memo_id = uuid.uuid4()
    created_at = updated_at = datetime.utcnow()

    # Connect to DB and insert initial record
    conn = psycopg2.connect(**conn_params)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO cledev.memos (
            memo_id, user_id, client_name_input, memo_title, template_type,
            processing_status, meeting_details_input, client_profile_inputs,
            generated_content, user_edits, created_at, updated_at,
            last_openend_at, error_message, current_version, user_approval, regeneration_comments
        )
        VALUES (
            %s, %s, %s, %s, %s,
            'Processing', %s, NULL,
            NULL, NULL, %s, %s,
            NULL, NULL, 1, NULL, NULL
        )
    """, (
        str(memo_id),
        str(uuid.UUID(user_id.split("_")[1].zfill(32))),  # Adjust based on real UUID logic
        client_name, memo_title, template_type,
        json.dumps({"meeting_details": meeting_details, "attendees": attendees}),
        created_at, updated_at
    ))
    conn.commit()
    cursor.close()
    conn.close()

    # Start background processing
    thread = threading.Thread(
        target=update_memo_record,
        args=(memo_id, meeting_details, attendees, conn_params)
    )
    thread.start()

    # Return immediate response
    return {
        "status": "success",
        "message": "Memo inserted and processing started.",
        "memo_id": str(memo_id)
    }

# -------------------------
# Example usage (optional)
# -------------------------
if __name__ == "__main__":
    # Sample input JSON
    request_json = {
        "userId": "user_002",
        "template_type": "client_memo",
        "client_name": "Northern Trust Asset Management",
        "memo_title": "Investment Strategy Meeting",
        "meeting_details": {
            "date": "2025-05-14",
            "time": "14:30:00.000Z",
            "in_person": True,
            "purpose": "Review Q2 performance",
            "location": "United States",
            "key_areas_for_discussion": [
                "Fixed Income",
                "Alternative investments"
            ]
        },
        "attendees": [
            {
                "client": {
                    "name": "Nitin P",
                    "title": "Analyst",
                    "company": "Northern Trust"
                }
            },
            {
                "NT": {
                    "name": "Raj K",
                    "title": "Analyst",
                    "company": "Northern Trust"
                }
            },
            {
                "consultant": [
                    {
                        "name": "Delvin Saji",
                        "title": "Strategy Consultant",
                        "company": "ACME Advisors"
                    }
                ]
            }
        ]
    }

    # Replace with your PostgreSQL DB credentials
    conn_params = {
        'dbname': 'your_db',
        'user': 'your_user',
        'password': 'your_password',
        'host': 'localhost',
        'port': '5432'
    }

    result = insert_memo(request_json, conn_params)
    print(json.dumps(result, indent=2))
