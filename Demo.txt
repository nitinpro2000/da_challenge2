import asyncpg
from fastapi.responses import JSONResponse
from src.utils.postgres import async_db_connection_url
from src.utils.logger import setup_logger
from src.exceptions import BadRequest, NotFound

logger = setup_logger(__name__)

class FetchMemoData:
    """
    A class to handle retrieval of memo data from the PostgreSQL database.
    """

    async def fetch_memo_data(self, memo_id: str) -> dict:
        """
        Asynchronously fetch memo details from the database using the provided memo ID.

        Args:
            memo_id (str): Unique identifier for the memo.

        Returns:
            dict: A dictionary containing memo details such as:
                  - memo_id
                  - processing_status
                  - template_id
                  - updated_at
                  - created_at
                  - last_opened_at
                  - generated_content

        Raises:
            BadRequest: If memo_id is not provided.
            NotFound: If no memo is found for the given ID.
            RuntimeError: If an unexpected error occurs while querying the database.
        """
        try:
            logger.info(f"Received request to fetch memo with ID: {memo_id}")

            if not memo_id:
                raise BadRequest("Missing memo_id data")

            # Establish asynchronous DB connection
            conn = await asyncpg.connect(async_db_connection_url)

            # Fetch memo record from the database
            row = await conn.fetchrow("""
                SELECT memo_id,
                       processing_status,
                       template_id,
                       updated_at,
                       created_at,
                       last_opened_at,
                       generated_content
                FROM cledev.memos
                WHERE memo_id = $1
                ORDER BY updated_at DESC
                LIMIT 1
            """, memo_id)

            await conn.close()

            if not row:
                raise NotFound(f"No memo found with memo_id: {memo_id}")

            memo_data = dict(row)
            logger.info(f"Fetched memo data successfully for memo_id: {memo_id}")
            return memo_data

        except (BadRequest, NotFound) as e:
            logger.error(f"Client error: {e}")
            raise

        except Exception as e:
            logger.exception("Internal server error while fetching memo data")
            raise RuntimeError("Failed to fetch memo data") from e
