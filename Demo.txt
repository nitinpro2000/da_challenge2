Here's a clear, refined description along with acceptance criteria for implementing ‚ÄúGrounding with Bing Search‚Äù in your news agent:

---

## üìò Feature Description

**Grounding with Bing Search** enables your news agent to fetch and integrate real-time public web data when responding to user queries. Instead of relying solely on static, model-internal knowledge, the agent now:

1. Receives the user's query (e.g., ‚ÄúWhat‚Äôs the latest news about renewable energy?‚Äù).
2. Internally decides whether to invoke Bing grounding.
3. Sends a Bing search query to the Bing grounding service.
4. Retrieves relevant web data chunks.
5. Generates a response that includes:

   * Summarized content based on recent results.
   * Inline citations linking to the original web sources and to the Bing query used.

This ensures:

* Up-to-date information in news coverage.
* Transparency through visible citations.
* Compliance with Microsoft‚Äôs display requirements ([Microsoft Learn][1], [ArgonSys][2]).

---

## ‚úÖ Acceptance Criteria

### 1. Triggering Grounding

* \[ ] The agent determines when a query is news-related based on developer-specified rules (e.g., keywords like ‚Äúupdate,‚Äù ‚Äútoday,‚Äù ‚Äúlatest‚Äù).
* \[ ] For such queries, the agent invokes the Grounding with Bing Search tool correctly.

### 2. Connector Setup

* \[ ] A valid Bing grounding resource is configured and linked in Azure (same resource group as the agent) ([Microsoft Learn][1]).
* \[ ] Optional tool parameters such as `count`, `freshness`, `market`, and `set_lang` are configurable and passed through the API call.

### 3. Bing Search Integration

* \[ ] The agent sends the user‚Äôs query to Bing via the grounding service.
* \[ ] The grounding response (web snippets, URLs, etc.) is consumed by the agent without exposing raw content to the user; it uses the data to summarize.

### 4. Response Composition & Citations

* \[ ] The agent's reply must include:

  * A concise summary of findings.
  * In-line citations linking to:

    * Each source URL (from `annotations` in the API response).
    * The actual Bing query URL (e.g., ‚Äú[https://www.bing.com/search?q={query}‚Äù](https://www.bing.com/search?q={query}‚Äù)) ([Microsoft Learn][1], [PYMNTS][3]).
* \[ ] All citations follow the exact format returned by the service (unaltered by the agent) per Microsoft‚Äôs Display Requirements ([Microsoft Learn][1]).

### 5. Tool Re‚Äëinvoke Logic

* \[ ] If initial summary is insufficient (based on internal agent criteria), the agent should be able to call the grounding tool again within the same session .

### 6. Latency & Cost Handling

* [ ] The agent logs timing for:

  * Outbound search request
  * Grounding response
  * Final response generation
* [ ] Usage of grounding records the cost associated, enabling developer monitoring and budgeting.

### 7. Error Handling & Fallback

* [ ] If Bing grounding fails or times out, the agent should gracefully:

  * Notify the user of delay or inability to fetch live info.
  * Fall back to pre‚Äëtrained knowledge where applicable.

### 8. Testing

* [ ] Unit tests validate:

  * Bing tool invocation occurs with correct parameters.
  * Response includes correctly formatted citations.
  * Summaries reflect grounding output as intended.
* [ ] Integration tests simulate:

  * End-to-end user queries ("What's today's top news?").
  * Fail-over behavior when grounding is unavailable.

---

## üß© Summary Table

| Feature Area            | Description / Criteria                                   |
| ----------------------- | -------------------------------------------------------- |
| Grounding Trigger       | Fires on news-related queries                            |
| Azure Setup             | Proper resource and API connection                       |
| Search Invocation       | Uses Bing tools following spec                           |
| Response with Citations | Includes URLs & raw Bing query link, formatted correctly |
| Multi-step Invocation   | Agent can refine with additional searches                |
| Logging & Cost Tracking | Logs latency & usage, supports cost oversight            |
| Robust Fallback Logic   | Handles service failures gracefully                      |
| Automated Testing       | Covers both unit and integration flows                   |

---

Let me know if you'd like me to include example API calls, UI mockups, or expand on any part (like error fallback messages).

[1]: https://learn.microsoft.com/en-us/azure/ai-foundry/agents/how-to/tools/bing-grounding?utm_source=chatgpt.com "Grounding with Bing Search - Azure AI Foundry - Learn Microsoft"
[2]: https://argonsys.com/microsoft-cloud/library/getting-results-with-ai-agents-bing-grounding/?utm_source=chatgpt.com "Getting Results with AI Agents + Bing Grounding - Argon Systems"
[3]: https://www.pymnts.com/big-tech/2025/microsoft-retire-bing-search-apis-promote-azure-ai-agents/?utm_source=chatgpt.com "Microsoft to Retire Bing Search APIs, Promote Azure AI Agents"
