Here‚Äôs a clear **description** and **acceptance criteria** for implementing **error status tracking for memos in the `memos` table**:

---

## ‚úÖ **Feature: Update Memo Error Status and Store Error Message**

### üìò **Description:**

Enhance the backend logic to **update the `memos` table** with an appropriate **error status** and **error message** whenever memo processing fails. This allows tracking and debugging of failed memos and ensures that failures are visible in both the UI and logs.

When a failure occurs during memo processing (e.g., OpenAI call failure, DB error, validation error), the `status` column should be updated to `"error"` and the `error_message` column should contain a short, relevant description of the error.

---

### ‚úÖ **Acceptance Criteria:**

| **ID** | **Criteria**          | **Description**                                                                                                                                         |
| ------ | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
| AC1    | Error Status Column   | The `memos` table should have a `status` column. On failure, this must be set to `"error"`.                                                             |
| AC2    | Error Message Column  | The table should include an `error_message` (TEXT or VARCHAR) column to store error details (e.g., `"OpenAI timeout"`, `"Missing client_id"`).          |
| AC3    | Update on Exception   | During memo creation or processing, if an exception occurs, the system must update the `status = 'error'` and insert the corresponding `error_message`. |
| AC4    | Logging               | The full error stack trace should still be logged (internally), but the message in the database should be a concise, user-friendly explanation.         |
| AC5    | Non-blocking Failures | Failures in one memo should not crash the system or block other memos from being processed.                                                             |
| AC6    | Error Visibility      | The error status and message should be visible in admin tools or frontend (if applicable) for further triage.                                           |
| AC7    | Retry Safe            | If a retry mechanism is implemented later, it should detect `status='error'` and optionally reset the status.                                           |
| AC8    | Unit Tests            | Test cases must simulate failure scenarios and assert that the error status and messages are correctly set in the database.                             |
| AC9    | Optional: Truncation  | If needed, truncate error messages in DB to a fixed length (e.g., 255 characters) to prevent overflow.                                                  |

---

### üìù Example Schema Update (if needed):

```sql
ALTER TABLE memos ADD COLUMN status VARCHAR(20) DEFAULT 'pending';
ALTER TABLE memos ADD COLUMN error_message TEXT;
```

---

Let me know if you want Python (FastAPI + SQLAlchemy or asyncpg) code to implement this.
