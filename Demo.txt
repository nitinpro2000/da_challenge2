import streamlit as st
import pandas as pd
import io

# Custom CSS for background, buttons, and file uploader styling
def set_custom_styles():
    st.markdown(
        """
        <style>
        body {
            background-image: url('https://source.unsplash.com/random/1920x1080?technology,abstract');
            background-size: cover;
            background-attachment: fixed;
        }
        .stApp {
            background: rgba(255, 255, 255, 0.9);
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        h1, h2, h3, h4, h5, h6 {
            color: #2E86C1;
            font-family: 'Arial', sans-serif;
        }
        .step-header {
            color: #2874A6;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .stButton>button {
            background-color: #2874A6;
            color: white;
            border-radius: 8px;
            padding: 10px 20px;
            border: none;
            font-size: 16px;
        }
        .stButton>button:hover {
            background-color: #1A5276;
        }
        .nav-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #2E4053;
            padding: 10px 20px;
            border-radius: 8px;
        }
        .nav-bar h3 {
            color: white;
            margin: 0;
        }
        .logout-btn {
            color: white;
            background: #CB4335;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
            font-weight: bold;
        }
        .logout-btn:hover {
            background: #922B21;
        }
        .file-upload {
            border: 2px dashed #2874A6;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            color: #2874A6;
            font-weight: bold;
            font-family: Arial, sans-serif;
        }
        .file-upload:hover {
            border-color: #1A5276;
            color: #1A5276;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

# Function to process uploaded files and generate test cases
def generate_test_cases(excel_file, tdm_file):
    excel_data = pd.read_excel(excel_file)
    tdm_data = pd.read_csv(tdm_file)  # Assuming TDM is in CSV format
    test_cases = pd.merge(excel_data, tdm_data, how="inner", on="CommonColumn")
    return test_cases

# Apply custom styles
set_custom_styles()

# Navigation bar
st.markdown(
    """
    <div class="nav-bar">
        <h3>Test Case Generator</h3>
        <a href="#" class="logout-btn">Logout</a>
    </div>
    """,
    unsafe_allow_html=True,
)

st.title("Generate Test Cases in Styled Grid Layout")
st.write("Follow these steps to upload your files, generate test cases, and download them.")

# Step 1: Upload Files (Grid layout with styled file uploaders)
st.markdown("<div class='step-header'>Step 1: Upload Your Files</div>", unsafe_allow_html=True)
col1, col2 = st.columns(2)

with col1:
    st.markdown("**üìÑ Upload Excel File**")
    excel_file = st.file_uploader(
        label="Drag and drop your Excel file here or browse",
        type=["xlsx"],
        key="excel_upload",
        label_visibility="collapsed",
    )
    st.markdown("<div class='file-upload'>üìÑ Drag and drop or click to upload an Excel file</div>", unsafe_allow_html=True)

with col2:
    st.markdown("**üìÇ Upload TDM File**")
    tdm_file = st.file_uploader(
        label="Drag and drop your TDM file here or browse",
        type=["csv", "txt"],
        key="tdm_upload",
        label_visibility="collapsed",
    )
    st.markdown("<div class='file-upload'>üìÇ Drag and drop or click to upload a TDM file</div>", unsafe_allow_html=True)

# Step 2: Generate Test Cases Button
st.markdown("<div class='step-header'>Step 2: Generate Test Cases</div>", unsafe_allow_html=True)
if st.button("üõ†Ô∏è Generate Test Cases"):
    if excel_file and tdm_file:
        try:
            # Generate test cases
            test_cases = generate_test_cases(excel_file, tdm_file)

            # Display success message and results
            st.success("Test cases generated successfully! Scroll down to preview and download.")
            st.markdown("<div class='step-header'>Generated Test Cases:</div>", unsafe_allow_html=True)
            st.dataframe(test_cases, height=300)

            # Convert DataFrame to CSV
            buffer = io.BytesIO()
            test_cases.to_csv(buffer, index=False)
            buffer.seek(0)

            # Store test cases in session state for download
            st.session_state["test_cases"] = buffer
        except Exception as e:
            st.error(f"An error occurred while generating test cases: {e}")
    else:
        st.warning("Please upload both files to proceed.")

# Step 3: Download Test Cases
st.markdown("<div class='step-header'>Step 3: Download Your Test Cases</div>", unsafe_allow_html=True)
if "test_cases" in st.session_state:
    st.download_button(
        label="üì• Download Test Cases",
        data=st.session_state["test_cases"],
        file_name="test_cases.csv",
        mime="text/csv",
    )
else:
    st.info("Generate test cases first to enable downloading.")
