from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend
import base64

def construct_public_key(n, e):
    """Constructs a public key from n and e values."""
    
    n_int = base64_to_int(n)
    e_int = base64_to_int(e)
    
    public_key = rsa.RSAPublicNumbers(n_int, e_int).public_key(default_backend())
    
    pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    
    return pem

def base64_to_int(s):
    """Converts a base64 encoded string to an integer."""
    return int.from_bytes(base64.urlsafe_b64decode(s + '==='), 'big')

# Example usage (replace with your actual n and e values from the JWKS):
n = "your_n_value"
e = "your_e_value"
public_key_pem = construct_public_key(n, e)

# Now you can use public_key_pem with jwt.decode()
